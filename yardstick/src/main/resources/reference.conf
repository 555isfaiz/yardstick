yardstick.player-emulation.arguments {
    duration = 300s
    game-architecture = "jar"
    packet-trace = false
    behavior {
        // Name of the player behavior program.
        name = "13"
        bots = 1
        "2" {
            bots = 10
            interval = 1s
        }
        "4" {
            duration = ${yardstick.player-emulation.arguments.duration}
            bots = 50
            joininterval = 5s
            numbotsperjoin = 5
            boxDiameter = 32
            spawnAnchor = true
        }
        "8" {
            duration = ${yardstick.player-emulation.arguments.duration}
            bots = 10
            joininterval = 5s
            numbotsperjoin = 5
            movementModel = "box"
            box {
                diameter = 32
                center.type = "worldSpawn"
            }
        }
        "9" {
            spikeDelayInSeconds = 0s
            spikeDurationInSeconds = 0s
            spikePeakPlayers = 0
        }
        "10" {
            duration = ${yardstick.player-emulation.arguments.duration}
            bots = 50
            bot-speed = 0.3
            startDelay = 10s
        }
        "11" {
            duration = ${yardstick.player-emulation.arguments.duration}
        }
        "12" {
            // Duration of the program. Players should disconnect after this time.
            duration = ${yardstick.player-emulation.arguments.duration}
            // Amount of time in between players joining the game.
            bots = 2
            joininterval = 1s
            // The number of players that join simultaneously.
            numbotsperjoin = 1
            // The player movement model.
            movementModel = "box"
            // A movement model that lets players walk around within a square (i.e., box) perimeter. Does not
            // limit player vertical travel.
            // Only used when ${yardstick.player-emulation.arguments.behavior."12".movementModel} == "box"
            box {
                // The height/width of the square.
                diameter = 32
                // How to determine the center of the square. Options are:
                // absolute
                //      The user gives an x and z coordinate specifying the center of the square.
                // spawn
                //      The world's spawn location is used as the center of the square.
                // player
                //      The player's spawn location is used as the center of the square.
                //      Note that some Minecraft-like services may spawn players in a random location close to
                //      the world's spawn location to avoid avatar clipping.
                center.type = "absolute"
                // Only used when center.type == "absolute"
                // Specifies the location of the square's center.
                center.absolute {
                    x = 256
                    z = 256
                }
            }
        }
        "13" {
            duration = ${yardstick.player-emulation.arguments.duration}
            bots = 1
            joininterval = 1s
            numbotsperjoin = 1
            worldWidth = 100
            worldLength = 100
            waypointSize = 10
            waypointNumber = 20
            // Can also be SAMOVAR-W
            startWaypointStrategy = "SAMOVAR-U"
            levelNumber = 4
            levelLogBase = 2
            connectionRange = 30
            AOIRange = 30
            ifUseExistModel = true
            pauseDurationDistribution {
                type = "logNormal"
                avg = 1.0
                std = 1.0
            }
            velocityDistribution {
                type = "logNormal"
                avg = 1.0
                std = 1.0
            }
            areaPopularityDistribution {
                type = "logNormal"
                avg = 1.0
                std = 1.0
            }
            distinctVisitedAreasDistribution {
                type = "logNormal"
                avg = 1.0
                std = 1.0
            }
            personalWeightDistribution {
                type = "zipf"
                theta = 1.0
            }
        }
    }
}
